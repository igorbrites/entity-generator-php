{% autoescape false %}
<?php
{% if config.namespace %}
namespace {{ config.namespace }};
{% endif %}

/**
 * Class {{ entity.name }}Test
 *
 * This test class was generated by
 * (Igor Brites' Entity Generator)[https://packagist.org/packages/igorbrites/entity-generator].
 * Please be careful changing it.
 *
 * @since {{ "now"|date("c") }}
{% if config.namespace %}
 * @package {{ config.namespace }}
{% endif %}
 */
class {{ entity.name }}Test extends \PHPUnit_Framework_TestCase
{
    /**
     * @var {{ entity.name }}
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new {{ entity.name }}();
    }

{% for field in entity.fields %}
    {% if field.provider %}
    /**
     * @dataProvider {{ field.provider }}
     * @covers       {% if config.namespace %}{{ config.namespace }}\{% endif %}{{ entity.name }}::set{{ field.ucName }}
     *
     * @param $test
     * @param $expected
     *
     * @throws \Exception
     */
    public function testSet{{ field.ucName }}($test, $expected)
    {
        if ($expected instanceof \Exception) {
            $this->setExpectedException(get_class($expected));
        }

        $this->object->set{{ field.ucName }}($test);
        $this->assertSame($expected, $this->object->get{{ field.ucName }}());
    }
    {% endif %}
{% endfor %}
public function providerIntegerNotNull()
    {
        $e = new \Exception();

        return [
            [10, 10, 'Int'],
            [2.35, $e, 'Float'],
            ['10', 10, 'Valid String'],
            ['Abobrinha', $e, 'Invalid String'],
            [false, $e, 'Boolean'],
            [null, $e, 'Null'],
            [0, $e, 'Zero']
        ];
    }

    public function providerIntegerNullable()
    {
        $e = new \Exception();

        return [
            [10, 10, 'Int'],
            [null, null, 'Null'],
            [2.35, $e, 'Float'],
            ['10', 10, 'Valid String'],
            ['Abobrinha', $e, 'Invalid String'],
            [false, $e, 'Boolean'],
            [0, $e, 'Zero']
        ];
    }

    public function providerStringNotNull()
    {
        $e = new \Exception();

        return [
            ['Apple', 'Apple', 'Valid String'],
            ['10', '10', 'Valid Numeric String'],
            [10, $e, 'Int'],
            [2.35, $e, 'Float'],
            [false, $e, 'Boolean'],
            [null, $e, 'Null'],
            [0, $e, 'Zero']
        ];
    }

    public function providerStringNullable()
    {
        $e = new \Exception();

        return [
            ['Apple', 'Apple', 'Valid String'],
            ['10', '10', 'Valid Numeric String'],
            [null, null, 'Null'],
            [10, $e, 'Int'],
            [2.35, $e, 'Float'],
            [false, $e, 'Boolean'],
            [0, $e, 'Zero']
        ];
    }

    public function providerFloatNotNull()
    {
        $e = new \Exception();

        return [
            [2.35, 2.35, 'Float'],
            ['Apple', $e, 'Invalid String'],
            ['10', $e, 'Invalid String'],
            [10, $e, 'Int'],
            [false, $e, 'Boolean'],
            [null, $e, 'Null'],
            [0, $e, 'Zero']
        ];
    }

    public function providerFloatNullable()
    {
        $e = new \Exception();

        return [
            [2.35, 2.35, 'Float'],
            [null, null, 'Null'],
            ['Apple', $e, 'Valid String'],
            ['10', $e, 'Invalid Numeric String'],
            [10, $e, 'Int'],
            [false, $e, 'Boolean'],
            [0, $e, 'Zero']
        ];
    }

    public function providerObjectNotNull()
    {
        $e = new \Exception();

        return [
            [null, $e, 'Null']
        ];
    }
}
{% endautoescape %}